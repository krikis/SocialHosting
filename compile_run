# run rmiregistry in console with CLASSPATH not containing RMI classes (so NOT in project root)
# export CLASSPATH=. # if you wish to wipe CLASSPATH in console temporarily
# rmiregistry

# go to 'src' directory in project
cd src/
# compile main server
javac  -d ./  ./server/*.java
# compile http-server
javac  -d ./  ./server/http/*.java
# compile rmi-server
javac  -d ./  ./server/rmi/*.java
# create stubs for rmi-server
rmic  -d ./ server.rmi.RMIServer

# compile applet to 'jarfile' directory
javac  -d ../jarfile/  ./applet/*.java
# compile rmi-server to 'jarfile' directory for applet jar
javac  -d ../jarfile/  ./server/rmi/*.java
# go to 'jarfile' directory
cd ../jarfile/
# create stubs for rmi-server
rmic  -d ./ server.rmi.RMIServer

# generate jar file for applet and put it in HTTP server public 'www' directory
# this jar file contains:
# - the applet code
# - the rmi-server code (because of the signing)
# - the public directory for the applet HTTP server
jar cvf ../www/applet.jar ./applet/* ./server/rmi/* ./public/*

# go to HTTP server public 'www' directory
cd ../www/
# sign the applet using the selfsigned 'applet' certificate 
# keytool -genkey -alias applet
# keytool -selfcert -alias applet
jarsigner ./applet.jar applet

# go back to 'src' directory
cd ../src/
# fire up the rmi-server
port=4444
if [ -n "$1" ]
then
  let "port=$1"
fi  

java  -Djava.rmi.server.codebase=http://localhost:$port/applet.jar  -Djava.security.policy=server/rmi/policy  server.Server $port
